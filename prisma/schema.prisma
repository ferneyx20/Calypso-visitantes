// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sede {
  id        String     @id @default(cuid())
  name      String     @unique
  address   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  empleados Empleado[]
}

model Empleado {
  id                   String              @id @default(cuid())
  identificacion       String              @unique
  nombreApellido       String
  cargo                String
  sedeId               String
  sede                 Sede                @relation(fields: [sedeId], references: [id], onDelete: Cascade)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  usuarioPlataforma    UsuarioPlataforma?
  visitasComoAnfitrion Visitante[]         @relation("VisitanteToAnfitrion")

  @@index([sedeId])
}

enum RolUsuarioPlataforma {
  AdminPrincipal
  Administrador
  Estandar
}

model UsuarioPlataforma {
  id                    String            @id @default(cuid())
  empleadoId            String            @unique // Un empleado solo puede ser un usuario de plataforma
  empleado              Empleado          @relation(fields: [empleadoId], references: [id], onDelete: Cascade)
  rol                   RolUsuarioPlataforma
  passwordHash          String // IMPORTANTE: Almacenar hash de contraseña, no la contraseña en texto plano
  canManageAutoregister Boolean           @default(false)
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  visitasRegistradasPor Visitante[]       @relation("VisitanteToRegistrador")

  @@index([empleadoId])
}

enum EstadoVisita {
  activa
  finalizada
  cancelada // Podría ser útil en el futuro
}

model Visitante {
  id                           String    @id @default(cuid())
  // Información del visitante
  tipodocumento                String    // Este campo ahora se llenará desde ManagedListItem
  numerodocumento              String
  nombres                      String
  apellidos                    String
  genero                       String    // Este campo ahora se llenará desde ManagedListItem
  fechanacimiento              DateTime
  rh                           String    // Este campo ahora se llenará desde ManagedListItem
  telefono                     String
  photoDataUri                 String?   @db.Text
  // Detalles de la visita
  personavisitadaId            String?
  personavisitada              Empleado? @relation("VisitanteToAnfitrion", fields: [personavisitadaId], references: [id], onDelete: SetNull)
  purpose                      String
  category                     String?
  tipovisita                   String    // Este campo ahora se llenará desde ManagedListItem
  // Información adicional (opcional)
  empresaProviene              String?
  numerocarnet                 String?
  vehiculoPlaca                String?
  // Salud y Seguridad
  arl                          String    // Este campo ahora se llenará desde ManagedListItem
  eps                          String    // Este campo ahora se llenará desde ManagedListItem
  // Contacto de Emergencia
  contactoemergencianombre     String
  contactoemergenciaapellido   String
  contactoemergenciatelefono   String
  contactoemergenciaparentesco String    // Este campo ahora se llenará desde ManagedListItem
  // Metadata de la visita
  horaentrada                  DateTime  @default(now())
  horasalida                   DateTime?
  estado                       EstadoVisita @default(activa)
  registradoPorId              String?
  registradoPor                UsuarioPlataforma? @relation("VisitanteToRegistrador", fields: [registradoPorId], references: [id], onDelete: SetNull)
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt

  @@index([numerodocumento])
  @@index([personavisitadaId])
  @@index([registradoPorId])
  @@index([estado])
}

// --- NUEVAS DEFINICIONES PARA LISTAS GESTIONABLES ---
enum ManagedListType {
  TIPOS_DE_DOCUMENTO
  GENEROS
  FACTORES_RH
  TIPOS_DE_VISITA
  ARLS
  EPSS
  PARENTESCOS_CONTACTO_EMERGENCIA
  // Puedes añadir más tipos de listas aquí según necesites
  // Por ejemplo: TIPOS_VEHICULO, MOTIVOS_VISITA_ESPECIFICOS, etc.
}

model ManagedListItem {
  id        String          @id @default(cuid())
  listType  ManagedListType // Indica a qué lista pertenece este ítem
  value     String          // El valor del ítem, ej: "Cédula de Ciudadanía"
  order     Int?            // Opcional: si necesitas un orden específico dentro de la lista
  isActive  Boolean         @default(true) // Para desactivar opciones en lugar de borrarlas permanentemente
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([listType, value]) // Asegura que no haya valores duplicados dentro de la misma lista
  @@index([listType])         // Para búsquedas eficientes por tipo de lista
  @@index([listType, order])  // Si decides usar 'order'
}
// --- FIN DE NUEVAS DEFINICIONES ---